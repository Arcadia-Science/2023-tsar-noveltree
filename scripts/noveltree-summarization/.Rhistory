hjust = 1)) +
xlab("Avg. # gene copies per-species\nin gene family") +
ylab("% Families"))
og_gene_hists[[3]] <- suppressWarnings(
ggplot(data = og_gene_freqs[-1,],
aes(x = avg_genes_per_spp_in_og,
y = number_of_genes)) +
geom_histogram(stat = "identity", color = "black",
fill = "grey") +
theme_classic(base_size = 12) +
theme(axis.text.x.bottom =
element_text(angle = 45, vjust = 1,
hjust = 1)) +
xlab("Avg. # gene copies per-species\nin gene family") +
ylab("# Genes"))
og_gene_hists[[4]] <- suppressWarnings(
ggplot(data = og_gene_freqs[-1,],
aes(x = avg_genes_per_spp_in_og,
y = percentage_of_genes)) +
geom_histogram(stat = "identity", color = "black",
fill = "grey") +
theme_classic(base_size = 12) +
theme(axis.text.x.bottom =
element_text(angle = 45, vjust = 1,
hjust = 1)) +
xlab("Avg. # gene copies per-species\nin gene family") +
ylab("% Genes"))
# Combine into one
og_gene_hists_plts <-
plot_grid(og_gene_hists[[1]], og_gene_hists[[2]],
og_gene_hists[[3]], og_gene_hists[[4]],
ncol = 2)
# print the plots if that is requested
if(show_plots == T){print(og_gene_hists_plts)}
###################################################
# Now plot the distribution of orthogroups across #
# species                                         #
###################################################
og_spp_counts <-
read_tsv(overall_stats_fpath, skip = 48,
show_col_types = FALSE, col_types = c("nn"),
col_names = c("number_of_species_in_og",
"number_of_ogs"))
og_spp_hist <- suppressWarnings(
ggplot(data = og_spp_counts,
aes(x = number_of_species_in_og,
y = number_of_ogs)) +
geom_histogram(stat = "identity", color = "black",
fill = "grey", size = 0.5) +
theme_classic(base_size = 14) +
xlab("# Species in Gene Family") +
ylab("# Gene Families"))
# And plot if requested
if(show_plots == T){print(og_spp_hist)}
# Write out to file if an output directory is provided
if(!is.null(out_dir)){
# Create the directory if it doesn't yet exist
dir.create(out_dir, showWarnings = F, recursive = T)
# Write out to file, both the histograms of gene count per og/genes per
# species per orthogroup
ggsave(og_gene_hists_plts, filename = paste0(out_dir, "genes_per_spp_in_ogs_histograms.pdf"),
height = 9, width = 13)
write.table(og_gene_freqs, file = paste0(out_dir, "genes_per_spp_in_ogs_histograms.tsv"),
sep = "\t",quote = F, col.names = T, row.names = F)
# Same for histograms of eh # of species per orthogroup.
ggsave(og_spp_hist, filename = paste0(out_dir, "num_species_in_og_hist.pdf"),
height = 6, width = 6)
write.table(og_spp_counts, file = paste0(out_dir, "num_species_in_og_hist.tsv"),
row.names = F, col.names = T, quote = F)
}
}
# Reformat orthofinder gene family summaries, saving both
# reformatted summaries, and their corresponding plots
get_ofinder_summaries(results_dir = result_directory, show_plots = T)
results_dir
res <- read.table("../../../../Projects/2023-tsar-phylorthology/results-tsar-eukaryotes-06062023/genefamily_copynumber_perspecies.csv")
res
res <- read.table("../../../../Projects/2023-tsar-phylorthology/results-tsar-eukaryotes-06062023/genefamily_copynumber_perspecies.csv", sep = ",")
res <- read.table("../../../../Projects/2023-tsar-phylorthology/results-tsar-eukaryotes-06062023/genefamily_copynumber_perspecies.csv", sep = ",", header = T)
head(res)
hist(res$Total / res$NumSpecies)
hist(log10(res$Total / res$NumSpecies))
hist(log10(res$Total / 36))
hist(res$Total / 36)
hist(log10(res$Total / res$NumSpecies))
hist(res$Total / res$NumSpecies)
res$copynum_perspp
res$copynum_perspp <- res$Total / res$NumSpecies
ggplot(data = res, aes(x = copynum_perspp)) + geom_histogram()
ggplot(data = res, aes(x = copynum_perspp)) + geom_histogram() + scale_y_log10() + theme_classic()
ggplot(data = res, aes(x = copynum_perspp)) + geom_histogram(color = 'black', fill = 'lightgrey') + scale_y_log10() + theme_classic()
min(res$copynum_perspp)
ggplot(data = res, aes(x = copynum_perspp, y = NumSpecies)) + geom_point() + theme_classic()
ggplot(data = res, aes(x = copynum_perspp, y = NumSpecies)) + geom_point() + theme_classic() + scale_x_log10()
ggplot(data = res, aes(y = copynum_perspp, x = NumSpecies)) + geom_point() + theme_classic() + scale_x_log10()
ggplot(data = res, aes(y = copynum_perspp, x = NumSpecies)) + geom_point() + theme_classic() + scale_y_log10()
ggplot(data = res, aes(y = copynum_perspp, x = NumSpecies)) + geom_histogram() + theme_classic() + scale_y_log10()
ggplot(data = res, aes(y = copynum_perspp, x = NumSpecies)) + geom_bar() + theme_classic() + scale_y_log10()
ggplot(data = res) + geom_bar(aes(y = copynum_perspp, x = NumSpecies)) + theme_classic() + scale_y_log10()
ggplot(data = res, aes(y = copynum_perspp, x = NumSpecies)) + geom_bar(stat = 'identity') + theme_classic() + scale_y_log10()
ggplot(data = res, aes(y = copynum_perspp, x = NumSpecies)) + geom_bar(stat = 'identity') + theme_classic() + scale_y_continuous(trans = "log10", breaks = b, labels = scales::label_comma())
ggplot(data = res, aes(y = copynum_perspp, x = NumSpecies)) + geom_bar(stat = 'identity') + theme_classic() + scale_y_continuous(trans = "log10", labels = scales::label_comma())
ggplot(data = res, aes(y = copynum_perspp, x = NumSpecies)) + geom_point() + theme_classic() + scale_y_log10()
ggplot(data = res, aes(y = copynum_perspp, x = NumSpecies)) + geom_point(position = position_jitterdodge(dodge.width = 0.1)) + theme_classic() + scale_y_log10()
ggplot(data = res, aes(y = copynum_perspp, x = NumSpecies)) + geom_point(position = position_dodge(width = 0.1)) + theme_classic() + scale_y_log10()
ggplot(data = res, aes(y = copynum_perspp, x = NumSpecies)) + geom_point(position = position_jitter(width = 0.1)) + theme_classic() + scale_y_log10()
ggplot(data = res, aes(y = copynum_perspp, x = NumSpecies)) + geom_point(position = position_jitter(width = 0.1)) + theme_classic() + scale_y_log10() + annotation_logticks(sides = 'l')
ggplot(data = res, aes(x = NumSpecies)) + geom_histogram() + theme_classic() + scale_y_log10() + annotation_logticks(sides = 'l')
ggplot(data = res, aes(x = NumSpecies)) + geom_histogram(fill = 'lightgrey', color = 'black') + theme_classic() + scale_y_log10() + annotation_logticks(sides = 'l')
dim(res)
og_counts
ggplot(data = res, aes(y = copynum_perspp, x = NumSpecies)) + geom_boxplot() + theme_classic() + scale_y_log10() + annotation_logticks(sides = 'l')
ggplot(data = res, aes(y = copynum_perspp, x = NumSpecies)) + geom_boxplot(group = NumSpecies) + theme_classic() + scale_y_log10() + annotation_logticks(sides = 'l')
ggplot(data = res, aes(y = copynum_perspp, x = NumSpecies)) + geom_boxplot(aes(group = NumSpecies)) + theme_classic() + scale_y_log10() + annotation_logticks(sides = 'l')
ggplot(data = res, aes(y = copynum_perspp, x = NumSpecies)) + geom_violin()) + theme_classic() + scale_y_log10() + annotation_logticks(sides = 'l')
ggplot(data = res, aes(y = copynum_perspp, x = NumSpecies)) + geom_violin() + theme_classic() + scale_y_log10() + annotation_logticks(sides = 'l')
ggplot(data = res, aes(y = copynum_perspp, x = NumSpecies)) + geom_violin(group = NumSpecies) + theme_classic() + scale_y_log10() + annotation_logticks(sides = 'l')
ggplot(data = res, aes(y = copynum_perspp, x = NumSpecies)) + geom_violin(aes(group = NumSpecies)) + theme_classic() + scale_y_log10() + annotation_logticks(sides = 'l')
ggplot(data = res, aes(y = copynum_perspp, x = NumSpecies)) + geom_violin(aes(group = NumSpecies)) + theme_classic() + scale_y_log10() + annotation_logticks(sides = 'l')
res <- read.table("../../../../Projects/2023-tsar-phylorthology/results-tsar-eukaryotes-06062023/summarized-results/orthofinder/per_spp_og_stats.tsv", sep = ",", header = T)
head(res)
res <- read.table("../../../../Projects/2023-tsar-phylorthology/results-tsar-eukaryotes-06062023/summarized-results/orthofinder/per_spp_og_stats.tsv", header = T)
head(res)
res <- read.table("../../../../Projects/2023-tsar-phylorthology/results-tsar-eukaryotes-06062023/filtered_orthogroups/all_ogs_counts.csv", header = T)
head(res)
# Read in the gene copy number and species count for each gene family
res <- read.table(paste0(results_dir, "filtered_orthogroups/all_ogs_counts.csv"), sep = ",", header = T)
head(res)
hist(mean_copy_num)
hist(res$mean_copy_num)
ggplot(data = res, aes(y = copynum_perspp, x = NumSpecies)) +
geom_point(position = position_jitter(width = 0.1)) +
theme_classic(base_size = 14) +
scale_y_log10() +
annotation_logticks(sides = 'l')
ggplot(data = res, aes(y = mean_copy_num, x = num_spp)) +
geom_point(position = position_jitter(width = 0.1)) +
theme_classic(base_size = 14) +
scale_y_log10() +
annotation_logticks(sides = 'l')
ggplot(data = res, aes(y = mean_copy_num, x = num_spp)) +
geom_point(position = position_jitter(width = 0.1)) +
theme_classic(base_size = 14) +
scale_y_log10() +
annotation_logticks(sides = 'l')
ggplot(data = res, aes(y = mean_copy_num, x = num_spp)) +
geom_point(position = position_jitter(width = 0.1),
alpha = 0.5) +
theme_classic(base_size = 14) +
scale_y_log10() +
annotation_logticks(sides = 'l')
ggplot(data = res, aes(y = mean_copy_num, x = num_spp)) +
geom_point(position = position_jitter(width = 0.2),
alpha = 0.5) +
theme_classic(base_size = 14) +
scale_y_log10() +
annotation_logticks(sides = 'l')
ggplot(data = res, aes(x = num_spp)) +
geom_histogram(fill = 'lightgrey', color = 'black') +
theme_classic(base_size = 14) +
scale_y_log10() +
annotation_logticks(sides = 'l')
ggplot(data = res, aes(x = num_spp)) +
geom_histogram(fill = 'lightgrey', color = 'black',
binwidth = 10) +
theme_classic(base_size = 14) +
scale_y_log10() +
annotation_logticks(sides = 'l')
ggplot(data = res, aes(x = num_spp)) +
geom_histogram(fill = 'lightgrey', color = 'black',
binwidth = 50) +
theme_classic(base_size = 14) +
scale_y_log10() +
annotation_logticks(sides = 'l')
ggplot(data = res, aes(x = num_spp)) +
geom_histogram(fill = 'lightgrey', color = 'black',
binwidth = 50) +
theme_classic(base_size = 14) +
scale_y_log10() +
annotation_logticks(sides = 'l')ggplot(data = res, aes(x = num_spp)) +
ggplot(data = res, aes(x = num_spp)) +
geom_histogram(fill = 'lightgrey', color = 'black',
binwidth = 3) +
theme_classic(base_size = 14) +
scale_y_log10() +
annotation_logticks(sides = 'l')
ggplot(data = res, aes(x = num_spp)) +
geom_histogram(fill = 'lightgrey', color = 'black',
binwidth = 0.5) +
theme_classic(base_size = 14) +
scale_y_log10() +
annotation_logticks(sides = 'l')
ggplot(data = res, aes(x = num_spp)) +
geom_histogram(fill = 'lightgrey', color = 'black',
bins = 50) +
theme_classic(base_size = 14) +
scale_y_log10() +
annotation_logticks(sides = 'l')
ggplot(data = res, aes(x = num_spp)) +
geom_histogram(fill = 'lightgrey', color = 'black',
bins = 36) +
theme_classic(base_size = 14) +
scale_y_log10() +
annotation_logticks(sides = 'l')
ggplot(data = res, aes(y = mean_copy_num, x = num_spp)) +
geom_point(position = position_jitter(width = 0.2),
alpha = 0.5) +
theme_classic(base_size = 14) +
scale_y_log10() +
annotation_logticks(sides = 'l')
ggplot(data = res, aes(y = mean_copy_num, x = num_spp)) +
geom_point(position = position_jitter(width = 0.2),
alpha = 0.5) +
theme_classic(base_size = 14) +
scale_y_log10() +
annotation_logticks(sides = 'l') +
xlab("# Species in gene family") +
ylab("Mean species gene copy #\nin gene family")
ggplot(data = res, aes(x = num_spp)) +
geom_histogram(fill = 'lightgrey', color = 'black') +
theme_classic(base_size = 14) +
scale_y_log10() +
annotation_logticks(sides = 'l')
copynum_v_numspp <-
ggplot(data = res, aes(y = mean_copy_num, x = num_spp)) +
geom_point(position = position_jitter(width = 0.2),
alpha = 0.5) +
theme_classic(base_size = 14) +
scale_y_log10() +
annotation_logticks(sides = 'l') +
xlab("# Species in gene family") +
ylab("Mean per-species\ngene copy #")
copynum_v_numspp
plot_grid(copynum_v_numspp, fam_sppcount_dist, ncol = 2)
fam_sppcount_dist <-
ggplot(data = res, aes(x = num_spp)) +
geom_histogram(fill = 'lightgrey', color = 'black') +
theme_classic(base_size = 14) +
scale_y_log10() +
annotation_logticks(sides = 'l') +
xlab("# Species in gene family") +
ylab("# Gene families")
plot_grid(copynum_v_numspp, fam_sppcount_dist, ncol = 2)
fam_sppcount_dist <-
ggplot(data = res, aes(x = num_spp)) +
geom_histogram(fill = 'lightgrey', color = 'black') +
theme_classic(base_size = 14) +
scale_y_log10() +
annotation_logticks(sides = 'l') +
xlab("# Species in gene family") +
ylab("# Gene families")
suppressWarnings(plot_grid(copynum_v_numspp, fam_sppcount_dist, ncol = 2))
suppressmessages(plot_grid(copynum_v_numspp, fam_sppcount_dist, ncol = 2))
suppressMessages(plot_grid(copynum_v_numspp, fam_sppcount_dist, ncol = 2))
out_dir
ggsave(genefam_composition_plt, filename = paste0(out_dir, "genefamily_compostion.pdf"),
height = 5, width = 7)
genefam_composition_plt <-
suppressMessages(plot_grid(copynum_v_numspp, fam_sppcount_dist, ncol = 2))
ggsave(genefam_composition_plt, filename = paste0(out_dir, "genefamily_compostion.pdf"),
height = 5, width = 7)
ggsave(genefam_composition_plt, filename = paste0(out_dir, "genefamily_compostion.pdf"),
height = 6, width = 12)
# Summarize gene family content, both with respect to number of species
# included in each gene family, and the per-species mean copy number
summ_genefam_composition(results_dir = result_directory, show_plots = T)
###########################################################
# OrthoFinder summary functions
###########################################################
# Function to read in and get per-species gene copy number
# for each orthogroup
get_per_spp_og_counts <-
function(results_dir = NULL, out_dir = NULL){
orthogroup_dir <-
list.files(path = paste0(results_dir, "orthofinder/complete_dataset/"), pattern = "Results_Inflation", full.names = T)
# read in per-species gene copy number per gene family
og_counts <-
read.table(paste0(orthogroup_dir, "/Orthogroups/Orthogroups.GeneCount.tsv"),
header = T, check.names = F)
colnames(og_counts) <- gsub("\\..*", "", colnames(og_counts))
# And calculate the number of species in each gene family
og_counts$NumSpecies <-
rowSums(og_counts[,-c(1,ncol(og_counts))] > 0)
# Write out to file if an output directory is provided
if(!is.null(out_dir)){
# Create the directory if it doesn't yet exist
dir.create(out_dir, showWarnings = F, recursive = T)
# And write out to file
write.table(og_counts, file = paste0(out_dir, "og_copy_num_per_spp.tsv"),
sep = "\t", quote = F, row.names = F, col.names = T)
}
return(og_counts)
}
# Function to summarize gene family content, both with respect to number of
# species included in each gene family, and the per-species mean copy number
summ_genefam_composition <-
function(results_dir = NULL, show_plots = F, out_dir = "summarized-results/orthofinder/"){
# Read in the gene copy number and species count for each gene family
res <- read.table(paste0(results_dir, "filtered_orthogroups/all_ogs_counts.csv"), sep = ",", header = T)
# Plot the mean species gene copy number against the number of species
# in each gene family
copynum_v_numspp <-
ggplot(data = res, aes(y = mean_copy_num, x = num_spp)) +
geom_point(position = position_jitter(width = 0.2),
alpha = 0.5) +
theme_classic(base_size = 14) +
scale_y_log10() +
annotation_logticks(sides = 'l') +
xlab("# Species in gene family") +
ylab("Mean per-species\ngene copy #")
# And plot the histogram of species counts across all gene families
fam_sppcount_dist <-
ggplot(data = res, aes(x = num_spp)) +
geom_histogram(fill = 'lightgrey', color = 'black') +
theme_classic(base_size = 14) +
scale_y_log10() +
annotation_logticks(sides = 'l') +
xlab("# Species in gene family") +
ylab("# Gene families")
# Combine them
genefam_composition_plt <-
suppressMessages(plot_grid(copynum_v_numspp, fam_sppcount_dist, ncol = 2))
# print the plots if that is requested
if(show_plots == T){print(genefam_composition_plt)}
# And save
ggsave(genefam_composition_plt, filename = paste0(out_dir, "genefamily_compostion.pdf"),
height = 6, width = 12)
}
# Summarize gene family content, both with respect to number of species
# included in each gene family, and the per-species mean copy number
summ_genefam_composition(results_dir = result_directory, show_plots = T)
# Summarize gene family content, both with respect to number of species
# included in each gene family, and the per-species mean copy number
summ_genefam_composition(results_dir = result_directory, show_plots = T)
# Summarize gene family content, both with respect to number of species
# included in each gene family, and the per-species mean copy number
summ_genefam_composition(results_dir = result_directory, show_plots = T)
# And get orthogroup summary statistics per species
per_spp_of_stats <-
get_per_spp_ofinder_stats(tree_fpath = paste0(result_directory, 'speciesrax/species_trees/inferred_species_tree.newick'),
samplesheet_fpath = paste0(result_directory, 'pipeline_info/complete_samplesheet.valid.csv'),
results_dir = result_directory, grp_name = 'Supergroup',
tip_grp_cols = tsar_cols,
count_cols = arcadia_cividis,
prop_cols = arcadia_viridis)
# Begin by, getting the per-species orthogroup counts/copy numbers
og_counts <- get_per_spp_og_counts(results_dir = result_directory)
# read in hierarchical orthogroup pairwise species overlaps
hog_spp_overlaps <-
read.table(paste0(phylohog_dir, "/Comparative_Genomics_Statistics/OrthologuesStats_Totals.tsv"),
check.names = F)
phylohog_dir <-
paste0(results_dir, "orthofinder/complete_dataset/Results_HOGs/")
# read in hierarchical orthogroup pairwise species overlaps
hog_spp_overlaps <-
read.table(paste0(phylohog_dir, "/Comparative_Genomics_Statistics/OrthologuesStats_Totals.tsv"),
check.names = F)
hog_spp_overlaps
ggplot(data = res, aes(y = mean_copy_num, x = num_spp)) +
geom_point(position = position_jitter(width = 0.2),
alpha = 0.5, size = 0.75) +
theme_classic(base_size = 14) +
scale_y_log10() +
annotation_logticks(sides = 'l') +
xlab("# Species in gene family") +
ylab("Mean per-species\ngene copy #")
ggplot(data = res, aes(y = mean_copy_num, x = num_spp)) +
geom_point(position = position_jitter(width = 0.2),
alpha = 0.5, size = 1) +
theme_classic(base_size = 14) +
scale_y_log10() +
annotation_logticks(sides = 'l') +
xlab("# Species in gene family") +
ylab("Mean per-species\ngene copy #")
# Plot the mean species gene copy number against the number of species
# in each gene family
copynum_v_numspp <-
ggplot(data = res, aes(y = mean_copy_num, x = num_spp)) +
geom_point(position = position_jitter(width = 0.2, height = 0.1),
alpha = 0.5, size = 1) +
theme_classic(base_size = 14) +
scale_y_log10() +
annotation_logticks(sides = 'l') +
xlab("# Species in gene family") +
ylab("Mean per-species\ngene copy #")
copynum_v_numspp
# Plot the mean species gene copy number against the number of species
# in each gene family
copynum_v_numspp <-
ggplot(data = res, aes(y = mean_copy_num, x = num_spp)) +
geom_point(position = position_jitter(width = 0.2, height = 0.01),
alpha = 0.5, size = 1) +
theme_classic(base_size = 14) +
scale_y_log10() +
annotation_logticks(sides = 'l') +
xlab("# Species in gene family") +
ylab("Mean per-species\ngene copy #")
copynum_v_numspp
# Function to summarize gene family content, both with respect to number of
# species included in each gene family, and the per-species mean copy number
summ_genefam_composition <-
function(results_dir = NULL, show_plots = F, out_dir = "summarized-results/orthofinder/"){
# Read in the gene copy number and species count for each gene family
res <- read.table(paste0(results_dir, "filtered_orthogroups/all_ogs_counts.csv"), sep = ",", header = T)
# Plot the mean species gene copy number against the number of species
# in each gene family
copynum_v_numspp <-
ggplot(data = res, aes(y = mean_copy_num, x = num_spp)) +
geom_point(position = position_jitter(width = 0.2),
alpha = 0.5, size = 1) +
theme_classic(base_size = 14) +
scale_y_log10() +
annotation_logticks(sides = 'l') +
xlab("# Species in gene family") +
ylab("Mean per-species\ngene copy #")
# And plot the histogram of species counts across all gene families
fam_sppcount_dist <-
ggplot(data = res, aes(x = num_spp)) +
geom_histogram(fill = 'lightgrey', color = 'black') +
theme_classic(base_size = 14) +
scale_y_log10() +
annotation_logticks(sides = 'l') +
xlab("# Species in gene family") +
ylab("# Gene families")
# Combine them
genefam_composition_plt <-
suppressMessages(plot_grid(copynum_v_numspp, fam_sppcount_dist, ncol = 2))
# print the plots if that is requested
if(show_plots == T){print(genefam_composition_plt)}
# And save
ggsave(genefam_composition_plt, filename = paste0(out_dir, "genefamily_compostion.pdf"),
height = 6, width = 12)
}
# Summarize gene family content, both with respect to number of species
# included in each gene family, and the per-species mean copy number
summ_genefam_composition(results_dir = result_directory, show_plots = T)
# Function to summarize gene family content, both with respect to number of
# species included in each gene family, and the per-species mean copy number
summ_genefam_composition <-
function(results_dir = NULL, show_plots = F, out_dir = "summarized-results/orthofinder/"){
# Read in the gene copy number and species count for each gene family
res <- read.table(paste0(results_dir, "filtered_orthogroups/all_ogs_counts.csv"), sep = ",", header = T)
# Plot the mean species gene copy number against the number of species
# in each gene family
copynum_v_numspp <-
ggplot(data = res, aes(y = mean_copy_num, x = num_spp)) +
geom_point(position = position_jitter(width = 0.2),
alpha = 0.5, size = 0.75) +
theme_classic(base_size = 14) +
scale_y_log10() +
annotation_logticks(sides = 'l') +
xlab("# Species in gene family") +
ylab("Mean per-species\ngene copy #")
# And plot the histogram of species counts across all gene families
fam_sppcount_dist <-
ggplot(data = res, aes(x = num_spp)) +
geom_histogram(fill = 'lightgrey', color = 'black') +
theme_classic(base_size = 14) +
scale_y_log10() +
annotation_logticks(sides = 'l') +
xlab("# Species in gene family") +
ylab("# Gene families")
# Combine them
genefam_composition_plt <-
suppressMessages(plot_grid(copynum_v_numspp, fam_sppcount_dist, ncol = 2))
# print the plots if that is requested
if(show_plots == T){print(genefam_composition_plt)}
# And save
ggsave(genefam_composition_plt, filename = paste0(out_dir, "genefamily_compostion.pdf"),
height = 6, width = 12)
}
# Summarize gene family content, both with respect to number of species
# included in each gene family, and the per-species mean copy number
summ_genefam_composition(results_dir = result_directory, show_plots = T)
# Function to summarize gene family content, both with respect to number of
# species included in each gene family, and the per-species mean copy number
summ_genefam_composition <-
function(results_dir = NULL, show_plots = F, out_dir = "summarized-results/orthofinder/"){
# Read in the gene copy number and species count for each gene family
res <- read.table(paste0(results_dir, "filtered_orthogroups/all_ogs_counts.csv"), sep = ",", header = T)
# Plot the mean species gene copy number against the number of species
# in each gene family
copynum_v_numspp <-
ggplot(data = res, aes(y = mean_copy_num, x = num_spp)) +
geom_point(position = position_jitter(width = 0.2),
alpha = 0.25, size = 0.75) +
theme_classic(base_size = 14) +
scale_y_log10() +
annotation_logticks(sides = 'l') +
xlab("# Species in gene family") +
ylab("Mean per-species\ngene copy #")
# And plot the histogram of species counts across all gene families
fam_sppcount_dist <-
ggplot(data = res, aes(x = num_spp)) +
geom_histogram(fill = 'lightgrey', color = 'black') +
theme_classic(base_size = 14) +
scale_y_log10() +
annotation_logticks(sides = 'l') +
xlab("# Species in gene family") +
ylab("# Gene families")
# Combine them
genefam_composition_plt <-
suppressMessages(plot_grid(copynum_v_numspp, fam_sppcount_dist, ncol = 2))
# print the plots if that is requested
if(show_plots == T){print(genefam_composition_plt)}
# And save
ggsave(genefam_composition_plt, filename = paste0(out_dir, "genefamily_compostion.pdf"),
height = 6, width = 12)
}
# Summarize gene family content, both with respect to number of species
# included in each gene family, and the per-species mean copy number
summ_genefam_composition(results_dir = result_directory, show_plots = T)
